version: ""
services:

  liquid:
    image: 8x7cdkcs/liquid:latest
    environment:
        - QUARKUS_OIDC_AUTH_SERVER_URL=http://keycloak:8087/realms/liquid
        - QUARKUS_MONGODB_CONNECTION_STRING=mongodb://mongo:27017/liquid
        - QUARKUS_KEYCLOAK_ADMIN_CLIENT_SERVER_URL=http://keycloak:8087
        - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
        - QUARKUS_REDIS_HOSTS=redis://redis:6379
        - QUARKUS_MONGODB_HOSTS=mongo:27017
        - QUARKUS_HTTP_PORT=8084
    ports:
      - "8080:8084"
    depends_on:
     kafka:
        condition: service_healthy
     
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    environment:
      KC_DB_URL: jdbc:postgresql://database:5432/liquid
      KC_DB: postgres
      KC_DIR: /import/liquid
      KC_DB_USERNAME: liquid
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8087
      KC_DB_PASSWORD: admin
      KC_HOSTNAME: localhost
      KC_HEALTH_ENABLED: true
      KAFKA_TOPIC: liquid-keycloak-event
      DNS_CACHE_SIZE: 0
      KAFKA_EVENTS: UPDATE_PROFILE,REGISTER
      KAFKA_CLIENT_ID: liquid-keycloak-producer
      KAFKA_BOOTSTRAP_SERVERS: kafka:9094
      KEYCLOAK_ADMIN: admin
      KC_HTTP_MANAGEMENT_PORT: 9000
      KC_HTTP_HOST: 0.0.0.0
      KEYCLOAK_ADMIN_PASSWORD: admin
      name: liquid-db
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 300s
    command: ["start-dev"]
    volumes:
        - ./keycloak/import:/import
        - ./keycloak/providers:/opt/keycloak/providers
    ports:
      - "9000:8087"
    depends_on:
      database:
        condition: service_healthy
      kafka:
        condition: service_healthy

      
  mongo:
    image: mongo:7.0.13-rc0-jammy
    environment:
       MONGO_INITDB_DATABASE: liquid
       DNS_CACHE_SIZE: 0
    ports:
       - "7432:27017"
    volumes:
       - ./mongo/import:/docker-entrypoint-initdb.d
  redis:
    image: redis:7.4.0-alpine
    environment:
        DNS_CACHE_SIZE: 0
    ports:
     - "6432:6379"

  database:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: "liquid"
      POSTGRES_PASSWORD: "admin"
    ports:
      - "5432:5432"
    healthcheck:
        test: ["CMD-SHELL", "sh -c 'pg_isready -U liquid -d liquid'"]
        interval: 10s
        timeout: 3s
        retries: 3
    volumes:
      - "pgdata:/var/lib/postgresql/data"
      
  kafka:
    image: docker.io/bitnami/kafka:3.8
    hostname: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    healthcheck:
       test: "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"
       interval: 1s
       timeout: 60s
       retries: 60
    environment:
      # KRaft settings
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@localhost:9093
      # Listeners
      - KAFKA_BROKER_ID=0
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true



volumes:
  pgdata:
  kafka_data:
    driver: local